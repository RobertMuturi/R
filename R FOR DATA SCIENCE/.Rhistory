rename(
student_id = 'Student ID',
full_name = 'Full Name'
)
#rename columns because of they non-syntactic
students |>
rename(
student_id = Student.ID
full_name = Full.Name
#rename columns because of they non-syntactic
students |>
rename(
student_id = 'Student.ID'
full_name = 'Full.Name'
#rename columns because of they non-syntactic
students |>
rename(
student_id = 'Student.ID',
full_name = 'Full.Name'
)
#rename columns because of they non-syntactic
students |>
rename(
student_id = 'Student ID',
full_name = 'Full Name'
)
#alternative approach is
students |> janitor::clean_names()
students <- read.csv("data/students.csv", na = c("N/A", ""))
#alternative approach is
students |> janitor::clean_names()
students |>
janitor::clean_names() |>
mutate(meal_plan = factor(meal_plan))
students
students <- read.csv("data/students.csv", na = c("N/A", ""))
students |>
janitor::clean_names() |>
mutate(meal_plan = factor(meal_plan))
library(tidyverse)
students <- read.csv("data/students.csv", na = c("N/A", ""))
students
#rename columns because of they non-syntactic
students |>
rename(
student_id = 'Student.ID',
full_name = 'Full.Name'
)
students |>
janitor::clean_names() |>
mutate(meal_plan = factor(meal_plan))
library(palmerpenguins)
library(ggthemes)
library(tidyverse)
#mapping for each individual species
#lm is linear model for drawing line of best fit
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
geom_point() +
geom_smooth(method = "lm")
#mapping curve for all species
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species)) +
geom_smooth(method = "lm")
library(nycflights13)
library(tidyverse)
library(ggplot2)
flights %>%
filter(dest == "IAH") %>%
group_by(year, month, day) %>%
summarise(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
# filter() This keeps rows based on the value of columns.
# flights that departed more than 120 minutes late
flights %>%
filter(dep_delay >120)
library(tidyverse)
students <- read.csv("data/students.csv", na = c("N/A", ""))
students
#rename columns because of they non-syntactic
students |>
rename(
student_id = 'Student.ID',
full_name = 'Full.Name'
)
#alternative approach is
students |> janitor::clean_names()
students |>
janitor::clean_names() |>
mutate(meal_plan = factor(meal_plan))
typeof(students)
students <- read.csv("data/https://pos.it/r4ds-students-csv", na = c("N/A", ""))
students <- read.csv("https://pos.it/r4ds-students-csv", na = c("N/A", ""))
students
source("~/R/R FOR DATA SCIENCE/5-data-import.R", echo=TRUE)
students <- as_tibble(students)
students <- read.csv("data/students.csv", na = c("N/A", ""))
students <- as_tibble(students)
students
#rename columns because of they non-syntactic
students |>
rename(
student_id = 'Student.ID',
full_name = 'Full.Name'
)
#alternative approach is
students |> janitor::clean_names()
students |>
janitor::clean_names() |>
mutate(meal_plan = factor(meal_plan))
#age is defined as character variable, we need to change
students |>
janitor::clean_names() |>
mutate(
meal_plan = factor(meal_plan),
age = parse_number(if_else(age == "five", "5", age))
)
library(tidyverse)
#skipping a row
read_csv(
"The first line of metadata
The second line of metadata
x,y,z
1,2,3",
skip = 2
)
comment = "#"
#commenting a row
read_csv(
"# A comment I want to skip
x,y,z
1,2,3",
comment = "#"
)
#data might not have column names but you can label sequentially
read_csv(
"1,2,3
4,5,6",
col_names = FALSE
)
#passing col_names to be used as column names
read_csv(
"1,2,3
4,5,6",
col_names = c("x", "y", "z")
)
df <- read.csv(text = text, quote = ",")
df <- read.csv(text = text, quote = "'")
print(df)
text <- "x,y\n1,'a,b'"
df <- read.csv(text = text, quote = "'")
df
df <- read.csv(text = text, quote = ",")
df <- read.csv(text = text, quote = "'")
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b\n\"1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
#extract variable 1
annoying$'1'
#scatterplot of 1 v 2
plot(annoying$1, annoying$2)
#scatterplot of 1 v 2
plot(annoying$'1', annoying$'2')
#create column 3 which is 2/1
annoying$'3' <- annoying$'1' / annoying$'2'
annoying
#rename the columns
colnames(annoying) <- c('one', "two", "three")
annoying
#basic types
read_csv("
logical,numeric,date,string
TRUE,1,2021-01-15,abc
false,4.5,2021-02-15,def
T,Inf,2021-02-16,ghi
")
#missing values
simple_csv <- "
x
10
.
20
30"
read.csv(simple_csv)
read_csv(simple_csv)
#tell readr this is a numeric column
df <- read_csv(
simple_csv,
col_types = list(x = col_double())
)
#here we're told there's a problem and where to find it with problems()
problems(df)
read_csv(simple_csv, na = ".")
another_csv <- "
x,y,z
1,2,3"
read_csv(
another_csv,
col_types = cols(.default = col_character())
)
#Another useful helper is cols_only() which will read in only the columns you specify:
read_csv(
another_csv,
col_types = cols_only(x = col_character())
)
sales_files <- c("data/01-sales.csv", "data/02-sales.csv", "data/03-sales.csv")
read_csv(sales_files, id = "file")
sales_files <-  list.files("data", pattern = "sales\\.csv$", full.names = TRUE)
sales_files
write_csv(students, "students.csv")
source("~/R/R FOR DATA SCIENCE/5-data-import.R", echo=TRUE)
write_rds(students, "students.rds")
read_rds("students.rds")
#age is defined as character variable, we need to change
students |>
janitor::clean_names() |>
mutate(
meal_plan = factor(meal_plan),
age = parse_number(if_else(age == "five", "5", age))
)
write_rds(students, "students.rds")
read_rds("students.rds")
View(students)
students <- read.csv("data/students.csv", na = c("N/A", ""))
#rename columns because of they non-syntactic
students |>
rename(
student_id = 'Student.ID',
full_name = 'Full.Name'
)
#age is defined as character variable, we need to change
students |>
janitor::clean_names() |>
mutate(
meal_plan = factor(meal_plan),
age = parse_number(if_else(age == "five", "5", age))
)
write_rds(students, "students.rds")
read_rds("students.rds")
#age is defined as character variable, we need to change
students <- students |>
janitor::clean_names() |>
mutate(
meal_plan = factor(meal_plan),
age = parse_number(if_else(age == "five", "5", age))
)
write_rds(students, "students.rds")
read_rds("students.rds")
students <- read.csv("data/students.csv", na = c("N/A", ""))
#read as list, convert to tibble
students <- as_tibble(students)
#age is defined as character variable, we need to change
students <- students |>
janitor::clean_names() |>
mutate(
meal_plan = factor(meal_plan),
age = parse_number(if_else(age == "five", "5", age))
)
write_rds(students, "students.rds")
read_rds("students.rds")
library(arrow)
write_parquet(students, "students.parquet")
read_parquet("students.parquet")
tibble(
x = c(1, 2, 5),
y = c("h", "m", "g"),
z = c(0.08, 0.83, 0.60)
)
tribble(
~x, ~y, ~z,
1, "h", 0.08,
2, "m", 0.83,
5, "g", 0.60
)
mpg
#LAYERS
library(tidyverse)
# AESTHETIC MAPPING -------------------------------------------------------
mpg
ggplot(mpg, aes(x = disp, y = hwy, color = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
geom_point()
#Right
ggplot(mpg, aes(x = displ, y = hwy, shape = class))+
geom_point()
#Left
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
geom_point()
#Right
ggplot(mpg, aes(x = displ, y = hwy, shape = class))+
geom_point()
#Left
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy))+
geom_point(color = "blue")
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(
color = "pink",
shape = "triangle"
)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = "blue"))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, stroke = "blue"))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, stroke = "shape"))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, shape = "stroke"))
# Create a scatter plot with shape 21 (filled circle) and stroke aesthetic
ggplot(mtcars, aes(wt, mpg)) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = displ < 5))
#LAYERS
library(tidyverse)
# AESTHETIC MAPPING -------------------------------------------------------
mpg
#Left
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
geom_point()
#Right
ggplot(mpg, aes(x = displ, y = hwy, shape = class))+
geom_point()
ggplot(mpg, aes(x = displ, y = hwy))+
geom_point(color = "blue") #make all points blue
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(
color = "pink",
shape = "triangle"
)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = "blue"))
library(ggplot2)
# Create a scatter plot with shape 21 (filled circle) and stroke aesthetic
ggplot(mtcars, aes(wt, mpg)) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = displ < 5))
#plotting the same variables on different plots
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth()
# you can change linetype for specific variables, this wont work with shape
ggplot(mpg, aes(x = displ, y = hwy, linetype = drv)) +
geom_point()
# you can change linetype for specific variables, this wont work with shape
ggplot(mpg, aes(x = displ, y = hwy, linetype = drv)) +
geom_smooth()
#using color
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(aes(linetype = drv))
#you can set the group aesthetic to a categorical variable to draw multiple objects.
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth(aes(group = drv))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth(aes(color = drv), show.legend = FALSE)
# placing mappings in a geom function, ggplot2 will treat them as local mappings for the layer only
ggplot(mpg, x = displ, y = hwy) +
geom_point(aes(color = class)) +
geom_smooth()
# placing mappings in a geom function, ggplot2 will treat them as local mappings for the layer only
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth()
# You can use the same idea to specify different data for each layer.
ggplot(mpg, aes(x= dspl, y = hwy)) +
geom_point()+
geom_point(
data = mpg |> filter(class == "2seater"),
color = "red"
) +
geom_point(
data = mpg |> filter(class == "2seater"),
shape = "circle open", size = 3, color = "red"
)
# You can use the same idea to specify different data for each layer.
ggplot(mpg, aes(x= displ, y = hwy)) +
geom_point()+
geom_point(
data = mpg |> filter(class == "2seater"),
color = "red"
) +
geom_point(
data = mpg |> filter(class == "2seater"),
shape = "circle open", size = 3, color = "red"
)
# Left
ggplot(mpg, aes(x = hwy)) +
geom_histogram(binwidth = 2)
# Middle
ggplot(mpg, aes(x = hwy)) +
geom_density()
# Right
ggplot(mpg, aes(x = hwy)) +
geom_boxplot()
ggplot(mpg, x = displ, y = hwy) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_line()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_line()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_line(aes(group = drv))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(drv)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(aes(drv))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(aes(shape = drv))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(aes(x = drv), se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(aes(group = drv), se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(aes(group = drv), se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(color = drv) +
geom_smooth(aes(group = drv), se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(color = drv) +
geom_smooth(aes(group = drv), se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(aes(group = drv), se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(color = drv) +
geom_smooth(se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(colour = drv) +
geom_smooth(se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(colour = drv) +
geom_smooth(se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv)) +
geom_smooth(se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(aes(linetype = drv),se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(aes(linetype = drv),se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_point(aes(shape = "circle open", size = 3, color = "white"))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_point(shape = "circle open", size = 3, color = "white")
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_point(shape = "circle open", size = 4, color = "white")
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_point(shape = "circle open", size = 3, width = 2, color = "white")
geom_point(aes(color = drv))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(size = 5, color = "white")
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(size = 4, color = "white")
geom_point(aes(color = drv))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(size = 4, color = "white") +
geom_point(aes(color = drv))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(size = 3, color = "white") +
geom_point(aes(color = drv))
